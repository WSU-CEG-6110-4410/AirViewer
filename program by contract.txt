Contract for Programming:

1. ZoomInZoomOut


/**
*@pre ("zoomValue!=null && zoomValue>0")
@post ("result == true")
*/
   public void zoomIn(DoubleProperty zoom) {
		this.zoomValue = zoom.get();
		this.zoomInValue = this.zoomValue * 1.1;
		this.result = zoomValue < zoomInValue;
        zoom.set(this.zoomInValue);
        
    }
	
	
	

/**
*@pre ("zoomValue!=null && zoomValue>0")
*@post ("result == true")
*/
	public void zoomOut(DoubleProperty zoom) {
        this.zoomValue = zoom.get();
		this.zoomOutValue = this.zoomValue / 1.1;
		this.result = zoomValue > zoomOutValue;
        zoom.set(this.zoomOutValue);
       
    }

2.ProgressBarAndIndicator	


/**
 * @invariant ("pageNumber != null && pageNumber.length() > 0")
 */
public class ProgressBarAndIndicator  {
	
	private Integer index;
	private int totalPages;
	

	
	/**
	*@pre ("index != null && totalPages >= index")
        *@post ("percentage != null")
    */
public double getPercentage(Integer index,AIRViewerModel model) {
		this.index= index;
		this.totalPages = model.numPages();
		double  percentage = (double)(this.index+1)/this.totalPages;
		return percentage;
}




3. SplitAndMerge
/**
*@pre ("textFieldValue != null")
*@post ("result == true")
*/
    public void splitter(String textFieldValue, Pagination pagination, AIRViewerModel model) {
			try {
			this.textFieldValue= textFieldValue;	
			Splitter splitter = new Splitter();
		       DirectoryChooser dirChooser = new DirectoryChooser();

		       dirChooser.setTitle("Select a folder");

		       File selectedDir = null;
		       if(pagination.getScene() != null) {
		    	   selectedDir =  dirChooser.showDialog((Stage) pagination.getScene().getWindow());
		       } else {
		        	 Path currentDir = Paths.get(".");
		       		String current = currentDir.toAbsolutePath() + "/src/test/resources/";
		         	 selectedDir = new File(current);
		      }		    		  

		       String selectedDirPath =selectedDir.getAbsolutePath();
		       SimpleDateFormat sf = new SimpleDateFormat("ddmmyyyHHMMSS");

		       
		       PDFMergerUtility PDFmerger = new PDFMergerUtility();
		       PDDocument document = PDDocument.load(new File(model.getPathName()));
		       List<PDDocument> pages = splitter.split(document);
		       Iterator<PDDocument> iterator = pages.listIterator();

		       //Saving each page as an individual document
		      
		      
		       PDDocument document1 = new PDDocument();
		       OutputStream out = new ByteArrayOutputStream();
		       boolean flag = false;
		       String[] values = textFieldValue.split(",");
		       System.out.println("valueslength"+values.length);
		       int count =1;
		       for(int i=0;i<values.length;i++) {
		    	   System.out.println("i..."+values[i]);
		    	   for(int j=0;j<pages.size();j++) {
		    		   System.out.println("j..."+j);
		    		   if(values[i].equals((j+1)+"")) {
		    			   System.out.println("values.........."+values[i]);
		    	    		  
		    			   File tempfile = new File(selectedDirPath + "/" + "temp_"+values[i]+".pdf");
		    			   flag = true;  
		    			   PDDocument pd = pages.get(j);
		    			   pd.save(tempfile);
		    			   PDFmerger.addSource(tempfile);
		    			   
		    			   
		    		   }
		    	   }
		       }
		       
		       if(flag) {
		    	   String name = "split-"+sf.format(new Date()) +".pdf";
		    	   String path = selectedDirPath + "/" + name;
				   PDFmerger.setDestinationFileName(path);
				   PDFmerger.mergeDocuments(MemoryUsageSetting.setupMainMemoryOnly());
				   Alert alert = new Alert(AlertType.INFORMATION);
					alert.setTitle("Success");
					alert.setHeaderText("Results:");
					alert.setContentText("File has been split with name "+name);	
					alert.showAndWait();
		       }
		       for(int i=0;i<values.length;i++) {
		    	   File tempfile = new File(selectedDirPath + "/" + "temp_"+values[i]+".pdf");
		    	   tempfile.delete();
		       }
			} catch(Exception e) {
				e.printStackTrace();
			}
		}